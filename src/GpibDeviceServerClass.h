//=============================================================================
//
// file :         GpibDeviceServerClass.h
//
// description :  Include for the GpibDeviceServerClass root class.
//                This class is represents the singleton class for
//                the GpibDeviceServer device class.
//                It contains all properties and methods which the 
//                GpibDeviceServer requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: xavela $
//
// $Revision: 1.2 $
//
// $Log: not supported by cvs2svn $
// Revision 1.1.1.1  2004/06/30 13:52:14  syldup
// intial import from soleil
//
// Revision 1.5  2004/06/30 08:57:58  elattaoui
// xavier : ajout de #ifdef linux
// changement de #define MAX_... par const int !
//
// Revision 1.4  2004/06/29 13:32:51  elattaoui
// xavier : oubli de commandes en mode expert
// rectifie
//
// Revision 1.3  2004/06/29 10:16:09  elattaoui
// xavier : ajout du .obj dans le repertoire lib
//
// Revision 1.2  2004/06/29 10:05:59  elattaoui
// xavier : verion finale du DServer
// partage des commandes en mode Operator et
// Expert
// ajout d'un CTOR par address avec la fonction ibdev
//
// Revision 1.1.1.1  2004/02/11 09:06:06  root
// initial import
//
// Revision 1.1.1.1  2003/10/08 09:30:46  verdier
// Imported using TkCVS
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _GPIBDEVICESERVERCLASS_H
#define _GPIBDEVICESERVERCLASS_H

#include <tango.h>


namespace GpibDeviceServer
{
//
// Define classes for commands
//
class ReceiveBinDataCmd : public Tango::Command
{
public:
	ReceiveBinDataCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	ReceiveBinDataCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~ReceiveBinDataCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class SendBinDataCmd : public Tango::Command
{
public:
	SendBinDataCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	SendBinDataCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~SendBinDataCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class BCConfigCmd : public Tango::Command
{
public:
	BCConfigCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	BCConfigCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~BCConfigCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class ConfigCmd : public Tango::Command
{
public:
	ConfigCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	ConfigCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~ConfigCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class WriteReadCmd : public Tango::Command
{
public:
	WriteReadCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	WriteReadCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~WriteReadCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class TriggerCmd : public Tango::Command
{
public:
	TriggerCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	TriggerCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~TriggerCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class BCGetConnectedDeviceListCmd : public Tango::Command
{
public:
	BCGetConnectedDeviceListCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	BCGetConnectedDeviceListCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~BCGetConnectedDeviceListCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class OpenByNameCmd : public Tango::Command
{
public:
	OpenByNameCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	OpenByNameCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~OpenByNameCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class OpenCmd : public Tango::Command
{
public:
	OpenCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	OpenCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~OpenCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class BCcmdCmd : public Tango::Command
{
public:
	BCcmdCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	BCcmdCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~BCcmdCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class BClloCmd : public Tango::Command
{
public:
	BClloCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	BClloCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~BClloCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class GetDeviceIDCmd : public Tango::Command
{
public:
	GetDeviceIDCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	GetDeviceIDCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~GetDeviceIDCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class BCclrCmd : public Tango::Command
{
public:
	BCclrCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	BCclrCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~BCclrCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class BCsendIFCCmd : public Tango::Command
{
public:
	BCsendIFCCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	BCsendIFCCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~BCsendIFCCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class SetTimeOutCmd : public Tango::Command
{
public:
	SetTimeOutCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	SetTimeOutCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~SetTimeOutCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class ClearCmd : public Tango::Command
{
public:
	ClearCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	ClearCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~ClearCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class GetibcntCmd : public Tango::Command
{
public:
	GetibcntCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	GetibcntCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~GetibcntCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class GetibstaCmd : public Tango::Command
{
public:
	GetibstaCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	GetibstaCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~GetibstaCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class GetiberrCmd : public Tango::Command
{
public:
	GetiberrCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	GetiberrCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~GetiberrCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class RemoteCmd : public Tango::Command
{
public:
	RemoteCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	RemoteCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~RemoteCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class LocalCmd : public Tango::Command
{
public:
	LocalCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	LocalCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~LocalCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class GetNameCmd : public Tango::Command
{
public:
	GetNameCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	GetNameCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~GetNameCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class ReadLongStringCmd : public Tango::Command
{
public:
	ReadLongStringCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	ReadLongStringCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~ReadLongStringCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class CloseCmd : public Tango::Command
{
public:
	CloseCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	CloseCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~CloseCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class ReadCmd : public Tango::Command
{
public:
	ReadCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	ReadCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~ReadCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class WriteCmd : public Tango::Command
{
public:
	WriteCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	WriteCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~WriteCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};



//
// The GpibDeviceServerClass singleton definition
//

class GpibDeviceServerClass : public Tango::DeviceClass
{
public:

//	add your own data members here
//------------------------------------

public:

//	Method prototypes
	static GpibDeviceServerClass *init(const char *);
	static GpibDeviceServerClass *instance();
	~GpibDeviceServerClass();
	
protected:
	GpibDeviceServerClass(string &);
	static GpibDeviceServerClass *_instance;
	void command_factory();
	void write_class_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace GpibDeviceServer

#endif // _GPIBDEVICESERVERCLASS_H
