static const char *RcsId = "$Header: /users/chaize/newsvn/cvsroot/Communication/Gpib/src/GpibDeviceServerClass.cpp,v 1.3 2005-03-15 11:03:32 xavela Exp $";
//+=============================================================================
//
// file :        GpibDeviceServerClass.cpp
//
// description : C++ source for the GpibDeviceServerClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the GpibDeviceServer once per process.
//
// project :     TANGO Device Server
//
// $Author: xavela $
//
// $Revision: 1.3 $
//
// $Log: not supported by cvs2svn $
// Revision 1.7  2005/03/15 10:40:04  elattaoui
// xavier.el : final version updated. Official version, to avoid local copies.
//
// Revision 1.6  2005/02/22 11:00:52  elattaoui
// xavier : makefile.vc changed.
//
// Revision 1.5  2004/06/30 08:57:58  elattaoui
// xavier : ajout de #ifdef linux
// changement de #define MAX_... par const int !
//
// Revision 1.4  2004/06/29 13:32:34  elattaoui
// xavier : oubli de commandes en mode expert
// rectifie
//
// Revision 1.3  2004/06/29 10:16:09  elattaoui
// xavier : ajout du .obj dans le repertoire lib
//
// Revision 1.2  2004/06/29 10:05:59  elattaoui
// xavier : verion finale du DServer
// partage des commandes en mode Operator et
// Expert
// ajout d'un CTOR par address avec la fonction ibdev
//
// Revision 1.1.1.1  2004/02/11 09:06:06  root
// initial import
//
// Revision 1.2  2003/11/19 09:41:01  vedder
// First working version, with win32 port, with soleil.
//
// Revision 1.1.1.1  2003/10/08 09:30:46  verdier
// Imported using TkCVS
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>

#include <GpibDeviceServer.h>
#include <GpibDeviceServerClass.h>


namespace GpibDeviceServer
{
//+----------------------------------------------------------------------------
//
// method : 		ReceiveBinDataCmd::ReceiveBinDataCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
ReceiveBinDataCmd::ReceiveBinDataCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
ReceiveBinDataCmd::ReceiveBinDataCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		ReceiveBinDataCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool ReceiveBinDataCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		ReceiveBinDataCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ReceiveBinDataCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevUShort	argin;
	extract(in_any, argin);

	return insert((static_cast<GpibDeviceServer *>(device))->receive_bin_data(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		SendBinDataCmd::SendBinDataCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
SendBinDataCmd::SendBinDataCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
SendBinDataCmd::SendBinDataCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		SendBinDataCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool SendBinDataCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		SendBinDataCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SendBinDataCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarCharArray	*argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->send_bin_data(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BCConfigCmd::BCConfigCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
BCConfigCmd::BCConfigCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
BCConfigCmd::BCConfigCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		BCConfigCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool BCConfigCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		BCConfigCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BCConfigCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->bcconfig(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		ConfigCmd::ConfigCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
ConfigCmd::ConfigCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
ConfigCmd::ConfigCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		ConfigCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool ConfigCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		ConfigCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ConfigCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ConfigCmd::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->config(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		WriteReadCmd::WriteReadCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
WriteReadCmd::WriteReadCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
WriteReadCmd::WriteReadCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		WriteReadCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool WriteReadCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		WriteReadCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *WriteReadCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	return insert((static_cast<GpibDeviceServer *>(device))->write_read(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		TriggerCmd::TriggerCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
TriggerCmd::TriggerCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
TriggerCmd::TriggerCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		TriggerCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool TriggerCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		TriggerCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *TriggerCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->trigger());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BCGetConnectedDeviceListCmd::BCGetConnectedDeviceListCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
BCGetConnectedDeviceListCmd::BCGetConnectedDeviceListCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
BCGetConnectedDeviceListCmd::BCGetConnectedDeviceListCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		BCGetConnectedDeviceListCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool BCGetConnectedDeviceListCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		BCGetConnectedDeviceListCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BCGetConnectedDeviceListCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->bcget_connected_device_list());
}


//+----------------------------------------------------------------------------
//
// method : 		OpenByNameCmd::OpenByNameCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
OpenByNameCmd::OpenByNameCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
OpenByNameCmd::OpenByNameCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		OpenByNameCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool OpenByNameCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		OpenByNameCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *OpenByNameCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->open_by_name());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		OpenCmd::OpenCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
OpenCmd::OpenCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
OpenCmd::OpenCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		OpenCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool OpenCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		OpenCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *OpenCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->open());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BCcmdCmd::BCcmdCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
BCcmdCmd::BCcmdCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
BCcmdCmd::BCcmdCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		BCcmdCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool BCcmdCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		BCcmdCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BCcmdCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->bccmd(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BClloCmd::BClloCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
BClloCmd::BClloCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
BClloCmd::BClloCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		BClloCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool BClloCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		BClloCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BClloCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->bcllo(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetDeviceIDCmd::GetDeviceIDCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
GetDeviceIDCmd::GetDeviceIDCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
GetDeviceIDCmd::GetDeviceIDCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		GetDeviceIDCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool GetDeviceIDCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		GetDeviceIDCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetDeviceIDCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->get_device_id());
}

//+----------------------------------------------------------------------------
//
// method : 		BCclrCmd::BCclrCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
BCclrCmd::BCclrCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
BCclrCmd::BCclrCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		BCclrCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool BCclrCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		BCclrCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BCclrCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->bcclr(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BCsendIFCCmd::BCsendIFCCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
BCsendIFCCmd::BCsendIFCCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
BCsendIFCCmd::BCsendIFCCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		BCsendIFCCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool BCsendIFCCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		BCsendIFCCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BCsendIFCCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->bcsend_ifc());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SetTimeOutCmd::SetTimeOutCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
SetTimeOutCmd::SetTimeOutCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
SetTimeOutCmd::SetTimeOutCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		SetTimeOutCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool SetTimeOutCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		SetTimeOutCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetTimeOutCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->set_time_out(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		ClearCmd::ClearCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
ClearCmd::ClearCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
ClearCmd::ClearCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		ClearCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool ClearCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		ClearCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ClearCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->clear());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetibcntCmd::GetibcntCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
GetibcntCmd::GetibcntCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
GetibcntCmd::GetibcntCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		GetibcntCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool GetibcntCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		GetibcntCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetibcntCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->getibcnt());
}

//+----------------------------------------------------------------------------
//
// method : 		GetibstaCmd::GetibstaCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
GetibstaCmd::GetibstaCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
GetibstaCmd::GetibstaCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		GetibstaCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool GetibstaCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		GetibstaCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetibstaCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->getibsta());
}

//+----------------------------------------------------------------------------
//
// method : 		GetiberrCmd::GetiberrCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
GetiberrCmd::GetiberrCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
GetiberrCmd::GetiberrCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		GetiberrCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool GetiberrCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		GetiberrCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetiberrCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->getiberr());
}

//+----------------------------------------------------------------------------
//
// method : 		RemoteCmd::RemoteCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
RemoteCmd::RemoteCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
RemoteCmd::RemoteCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		RemoteCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool RemoteCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		RemoteCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *RemoteCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->remote());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		LocalCmd::LocalCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
LocalCmd::LocalCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
LocalCmd::LocalCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		LocalCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool LocalCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		LocalCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *LocalCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->local());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetNameCmd::GetNameCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
GetNameCmd::GetNameCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
GetNameCmd::GetNameCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		GetNameCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool GetNameCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		GetNameCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetNameCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->get_name());
}

//+----------------------------------------------------------------------------
//
// method : 		ReadLongStringCmd::ReadLongStringCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
ReadLongStringCmd::ReadLongStringCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
ReadLongStringCmd::ReadLongStringCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		ReadLongStringCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool ReadLongStringCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		ReadLongStringCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ReadLongStringCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	return insert((static_cast<GpibDeviceServer *>(device))->read_long_string(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		CloseCmd::CloseCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
CloseCmd::CloseCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
CloseCmd::CloseCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		CloseCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool CloseCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		CloseCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *CloseCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->close());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		ReadCmd::ReadCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
ReadCmd::ReadCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
ReadCmd::ReadCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		ReadCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool ReadCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		ReadCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ReadCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->read());
}

//+----------------------------------------------------------------------------
//
// method : 		WriteCmd::WriteCmd()
// 
// description : 	constructor for the command of the GpibDeviceServer.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
WriteCmd::WriteCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc,
								Tango::DispLevel level)
:Command(name,in,out,in_desc,out_desc, level)
{
}
//
//	Constructor without in/out parameters description
//
WriteCmd::WriteCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		WriteCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool WriteCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	if (device->get_state() == Tango::MOVING  ||
		device->get_state() == Tango::FAULT)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}




//+----------------------------------------------------------------------------
//
// method : 		WriteCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *WriteCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevTemplateCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->write(argin));
	return new CORBA::Any();
}


//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
GpibDeviceServerClass *GpibDeviceServerClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::GpibDeviceServerClass(string &s)
// 
// description : 	constructor for the GpibDeviceServerClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
GpibDeviceServerClass::GpibDeviceServerClass(string &s):DeviceClass(s)
{

	cout2 << "Entering GpibDeviceServerClass constructor" << endl;
	write_class_property();
	
	cout2 << "Leaving GpibDeviceServerClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::~GpibDeviceServerClass()
// 
// description : 	destructor for the GpibDeviceServerClass
//
//-----------------------------------------------------------------------------
GpibDeviceServerClass::~GpibDeviceServerClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
GpibDeviceServerClass *GpibDeviceServerClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new GpibDeviceServerClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

GpibDeviceServerClass *GpibDeviceServerClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void GpibDeviceServerClass::command_factory()
{
	command_list.push_back(new WriteCmd("Write",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"String to send to the device",
		"",
		Tango::OPERATOR));
	command_list.push_back(new ReadCmd("Read",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"Returned string.",
		Tango::OPERATOR));
	command_list.push_back(new CloseCmd("Close",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new ReadLongStringCmd("ReadLongString",
		Tango::DEV_LONG, Tango::DEV_STRING,
		"Max expected string length.",
		"The readed string.",
		Tango::EXPERT));
	command_list.push_back(new GetNameCmd("GetName",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"no argin",
		"gpib device name",
		Tango::EXPERT));
	command_list.push_back(new LocalCmd("Local",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new RemoteCmd("Remote",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no arg",
		Tango::EXPERT));
	command_list.push_back(new GetiberrCmd("Getiberr",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new GetibstaCmd("Getibsta",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new GetibcntCmd("Getibcnt",
		Tango::DEV_VOID, Tango::DEV_ULONG,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new ClearCmd("Clear",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::EXPERT));
	command_list.push_back(new SetTimeOutCmd("SetTimeOut",
		Tango::DEV_SHORT, Tango::DEV_VOID,
		"accepted value are [0-15]",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BCsendIFCCmd("BCsendIFC",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BCclrCmd("BCclr",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"handler of the device to clear.",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new GetDeviceIDCmd("GetDeviceID",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BClloCmd("BCllo",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"Device ID",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BCcmdCmd("BCcmd",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"Command string.",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new OpenCmd("Open",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new OpenByNameCmd("OpenByName",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BCGetConnectedDeviceListCmd("BCGetConnectedDeviceList",
		Tango::DEV_VOID, Tango::DEVVAR_STRINGARRAY,
		"no argin",
		"list of connected device on the GPIB bus",
		Tango::EXPERT));
	command_list.push_back(new TriggerCmd("Trigger",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new WriteReadCmd("WriteRead",
		Tango::DEV_STRING, Tango::DEV_STRING,
		"String to send to the gpib device.",
		"String returned by the gpib Device.",
		Tango::OPERATOR));
	command_list.push_back(new ConfigCmd("Config",
		Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
		"Array of 2 long.",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BCConfigCmd("BCConfig",
		Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
		"Array of 2 long.",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new SendBinDataCmd("SendBinData",
		Tango::DEVVAR_CHARARRAY, Tango::DEV_VOID,
		"Array of binary data to send to the device",
		"",
		Tango::OPERATOR));
	command_list.push_back(new ReceiveBinDataCmd("ReceiveBinData",
		Tango::DEV_USHORT, Tango::DEVVAR_CHARARRAY,
		"length of the data to receive from the Gpib device",
		"Array of binary data",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void GpibDeviceServerClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create device and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new GpibDeviceServer(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before id database used.
		//---------------------------------------------
		if (Tango::Util::_UseDb == true)
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
}
//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void GpibDeviceServerClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	//	Prepeare DbDatum
	//--------------------------------------------
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("gpidDeviceServer");
	title << str_title;

	Tango::DbDatum	description("Description");
	string	str_desc("This server is a generic gpib interface.");
	description << str_desc;
	
	Tango::DbData	data;
	data.push_back(title);
	data.push_back(description);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
