static const char *TagName   = "$Name: not supported by cvs2svn $";
static const char *HttpServer= "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
static const char *RcsId = "$Header: /users/chaize/newsvn/cvsroot/Communication/Gpib/src/GpibDeviceServerClass.cpp,v 1.6 2006-06-13 14:56:38 fbecheri Exp $";
//+=============================================================================
//
// file :        GpibDeviceServerClass.cpp
//
// description : C++ source for the GpibDeviceServerClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the GpibDeviceServer once per process.
//
// project :     TANGO Device Server
//
// $Author: fbecheri $
//
// $Revision: 1.6 $
//
// $Log: not supported by cvs2svn $
// Revision 1.5  2005/07/04 11:34:11  vedder_bruno
// Fixed a memory leak when gpib board/device was not found on server startup.
// Server no more exits if a gpib board is not found at startup.
// Remove Lock/Unlock commands cause they are no more needed since serialisation is made by tango.
// These commands where potentialy dangerous and could cause gpib bus to be locked permanently.
// Added to CVS repository ugpib.h modified header that can be used with C++ compiler.
//
// Revision 1.4  2005/05/13 15:18:20  andy_gotz
// Latest version from ESRF. Added serialisation by class to main.cpp.
//
// Revision 1.3  2005/03/15 11:03:32  xavela
// xavier.el :  official version of the Gpib Device Server.
//
// Revision 1.7  2005/03/15 10:40:04  elattaoui
// xavier.el : final version updated. Official version, to avoid local copies.
//
// Revision 1.6  2005/02/22 11:00:52  elattaoui
// xavier : makefile.vc changed.
//
// Revision 1.5  2004/06/30 08:57:58  elattaoui
// xavier : ajout de #ifdef linux
// changement de #define MAX_... par const int !
//
// Revision 1.4  2004/06/29 13:32:34  elattaoui
// xavier : oubli de commandes en mode expert
// rectifie
//
// Revision 1.3  2004/06/29 10:16:09  elattaoui
// xavier : ajout du .obj dans le repertoire lib
//
// Revision 1.2  2004/06/29 10:05:59  elattaoui
// xavier : verion finale du DServer
// partage des commandes en mode Operator et
// Expert
// ajout d'un CTOR par address avec la fonction ibdev
//
// Revision 1.1.1.1  2004/02/11 09:06:06  root
// initial import
//
// Revision 1.2  2003/11/19 09:41:01  vedder
// First working version, with win32 port, with soleil.
//
// Revision 1.1.1.1  2003/10/08 09:30:46  verdier
// Imported using TkCVS
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>

#include <GpibDeviceServer.h>
#include <GpibDeviceServerClass.h>


namespace GpibDeviceServer_ns
{
//+----------------------------------------------------------------------------
//
// method : 		ReceiveBinDataCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ReceiveBinDataCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ReceiveBinDataCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	return insert((static_cast<GpibDeviceServer *>(device))->receive_bin_data(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		SendBinDataCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SendBinDataCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SendBinDataCmd::execute(): arrived" << endl;

	const Tango::DevVarCharArray	*argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->send_bin_data(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BCConfigCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BCConfigCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "BCConfigCmd::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->bcconfig(argin));
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		ConfigCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ConfigCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ConfigCmd::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->config(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		WriteReadCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *WriteReadCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "WriteReadCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	return insert((static_cast<GpibDeviceServer *>(device))->write_read(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		TriggerCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *TriggerCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "TriggerCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->trigger());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BCGetConnectedDeviceListCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BCGetConnectedDeviceListCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "BCGetConnectedDeviceListCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->bcget_connected_device_list());
}


//+----------------------------------------------------------------------------
//
// method : 		OpenByNameCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *OpenByNameCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "OpenByNameCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->open_by_name());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		OpenCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *OpenCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "OpenCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->open());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BCcmdCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BCcmdCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "BCcmdCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->bccmd(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BClloCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BClloCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "BClloCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->bcllo(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetDeviceIDCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetDeviceIDCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetDeviceIDCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->get_device_id());
}

//+----------------------------------------------------------------------------
//
// method : 		BCclrCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BCclrCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "BCclrCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->bcclr(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		BCsendIFCCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *BCsendIFCCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "BCsendIFCCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->bcsend_ifc());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SetTimeOutCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetTimeOutCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetTimeOutCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->set_time_out(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		ClearCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ClearCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ClearCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->clear());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetibcntCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetibcntCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetibcntCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->getibcnt());
}

//+----------------------------------------------------------------------------
//
// method : 		GetibstaCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetibstaCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetibstaCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->getibsta());
}

//+----------------------------------------------------------------------------
//
// method : 		GetiberrCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetiberrCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetiberrCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->getiberr());
}

//+----------------------------------------------------------------------------
//
// method : 		RemoteCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *RemoteCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "RemoteCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->remote());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		LocalCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *LocalCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "LocalCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->local());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetNameCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetNameCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetNameCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->get_name());
}

//+----------------------------------------------------------------------------
//
// method : 		ReadLongStringCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ReadLongStringCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ReadLongStringCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	return insert((static_cast<GpibDeviceServer *>(device))->read_long_string(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		CloseCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *CloseCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "CloseCmd::execute(): arrived" << endl;

	((static_cast<GpibDeviceServer *>(device))->close());
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		ReadCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ReadCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ReadCmd::execute(): arrived" << endl;

	return insert((static_cast<GpibDeviceServer *>(device))->read());
}

//+----------------------------------------------------------------------------
//
// method : 		WriteCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *WriteCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "WriteCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<GpibDeviceServer *>(device))->write(argin));
	return new CORBA::Any();
}

//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
GpibDeviceServerClass *GpibDeviceServerClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::GpibDeviceServerClass(string &s)
// 
// description : 	constructor for the GpibDeviceServerClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
GpibDeviceServerClass::GpibDeviceServerClass(string &s):DeviceClass(s)
{

	cout2 << "Entering GpibDeviceServerClass constructor" << endl;
	set_default_property();
	write_class_property();
	
	cout2 << "Leaving GpibDeviceServerClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::~GpibDeviceServerClass()
// 
// description : 	destructor for the GpibDeviceServerClass
//
//-----------------------------------------------------------------------------
GpibDeviceServerClass::~GpibDeviceServerClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
GpibDeviceServerClass *GpibDeviceServerClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new GpibDeviceServerClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

GpibDeviceServerClass *GpibDeviceServerClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void GpibDeviceServerClass::command_factory()
{
	command_list.push_back(new WriteCmd("Write",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"String to send to the device",
		"",
		Tango::OPERATOR));
	command_list.push_back(new ReadCmd("Read",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"Returned string.",
		Tango::OPERATOR));
	command_list.push_back(new CloseCmd("Close",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new ReadLongStringCmd("ReadLongString",
		Tango::DEV_LONG, Tango::DEV_STRING,
		"Max expected string length.",
		"The readed string.",
		Tango::EXPERT));
	command_list.push_back(new GetNameCmd("GetName",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"no argin",
		"gpib device name",
		Tango::EXPERT));
	command_list.push_back(new LocalCmd("Local",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new RemoteCmd("Remote",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no arg",
		Tango::EXPERT));
	command_list.push_back(new GetiberrCmd("Getiberr",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new GetibstaCmd("Getibsta",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new GetibcntCmd("Getibcnt",
		Tango::DEV_VOID, Tango::DEV_ULONG,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new ClearCmd("Clear",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::EXPERT));
	command_list.push_back(new SetTimeOutCmd("SetTimeOut",
		Tango::DEV_SHORT, Tango::DEV_VOID,
		"accepted value are [0-15]",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BCsendIFCCmd("BCsendIFC",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BCclrCmd("BCclr",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"handler of the device to clear.",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new GetDeviceIDCmd("GetDeviceID",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BClloCmd("BCllo",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"Device ID",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BCcmdCmd("BCcmd",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"Command string.",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new OpenCmd("Open",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new OpenByNameCmd("OpenByName",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BCGetConnectedDeviceListCmd("BCGetConnectedDeviceList",
		Tango::DEV_VOID, Tango::DEVVAR_STRINGARRAY,
		"no argin",
		"list of connected device on the GPIB bus",
		Tango::EXPERT));
	command_list.push_back(new TriggerCmd("Trigger",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"no argin",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new WriteReadCmd("WriteRead",
		Tango::DEV_STRING, Tango::DEV_STRING,
		"String to send to the gpib device.",
		"String returned by the gpib Device.",
		Tango::OPERATOR));
	command_list.push_back(new ConfigCmd("Config",
		Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
		"Array of 2 long.",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new BCConfigCmd("BCConfig",
		Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
		"Array of 2 long.",
		"no argout",
		Tango::EXPERT));
	command_list.push_back(new SendBinDataCmd("SendBinData",
		Tango::DEVVAR_CHARARRAY, Tango::DEV_VOID,
		"Array of binary data to send to the device",
		"",
		Tango::OPERATOR));
	command_list.push_back(new ReceiveBinDataCmd("ReceiveBinData",
		Tango::DEV_LONG, Tango::DEVVAR_CHARARRAY,
		"length of the data to receive from the Gpib device",
		"Array of binary data",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum GpibDeviceServerClass::get_class_property(string &prop_name)
{
	for (int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum GpibDeviceServerClass::get_default_device_property(string &prop_name)
{
	for (int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum GpibDeviceServerClass::get_default_class_property(string &prop_name)
{
	for (int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void GpibDeviceServerClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new GpibDeviceServer(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------

}


//+----------------------------------------------------------------------------
//
// method : 	GpibDeviceServerClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void GpibDeviceServerClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	//	Set Default Device Properties
	prop_name = "GpibDeviceName";
	prop_desc = "This property is used to connect gpib device by name.";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "GpibDeviceAddress";
	prop_desc = "This is gpidDevice address.";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "GpibDeviceTimeOut";
	prop_desc = "This is the GPIB device Time Out. Warning this is a predefined value:\n\n#define TNONE 0 Infinite timeout (disabled)\n#define T10us 1 Timeout of 10 us (ideal)\n#define T30us 2 Timeout of 30 us (ideal)\n#define T100us 3 Timeout of 100 us (ideal)\n#define T300us 4 Timeout of 300 us (ideal)\n#define T1ms 5 Timeout of 1 ms (ideal)\n#define T3ms 6 Timeout of 3 ms (ideal)\n#define T10ms 7 Timeout of 10 ms (ideal)\n#define T30ms 8 Timeout of 30 ms (ideal)\n#define T100ms 9 Timeout of 100 ms (ideal)\n#define T300ms 10 Timeout of 300 ms (ideal)\n#define T1s 11 Timeout of 1 s (ideal)\n#define T3s 12 Timeout of 3 s (ideal)\n#define T10s 13 Timeout of 10 s (ideal)\n#define T30s 14 Timeout of 30 s (ideal)\n#define T100s 15 Timeout of 100 s (ideal)\n#define T300s 16 Timeout of 300 s (ideal)\n#define T1000s 17 Timeout of 1000 s (maximum";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "GpibDeviceSecondaryAddress";
	prop_desc = "Second address of the gpib device.";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "GpibBoardName";
	prop_desc = "This is the name of the board where gpib device is plugged.\ne.g \"gpib1\"";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		GpibDeviceServerClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void GpibDeviceServerClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("gpidDeviceServer");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("This server is a generic gpib interface.");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs location
	string	rcsId(RcsId);
	string	filename(classname);
	start = rcsId.find("/");
	if (start!=string::npos)
	{
		filename += "Class.cpp";
		end   = rcsId.find(filename);
		if (end>start)
		{
			string	strloc = rcsId.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	//	Get CVS tag revision
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	end   = tagname.find(endstr);
	if (end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
